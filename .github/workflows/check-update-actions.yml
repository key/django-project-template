name: Check and Update Third-Party Actions

on:
  schedule:
    - cron: '0 0 1 * *'  # Run monthly on the 1st day
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-actions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub pyyaml

      - name: Check for action updates
        id: check-updates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
        run: |
          cat > check_actions.py << 'EOF'
          import os
          import re
          import yaml
          import json
          from pathlib import Path
          from github import Github

          def get_latest_version(repo_name):
              """Get the latest version tag for a GitHub repository."""
              g = Github(os.environ.get("GITHUB_TOKEN"))
              repo = g.get_repo(repo_name)
              tags = list(repo.get_tags())
              
              if not tags:
                  return None
                  
              # Filter for version tags (vX.Y.Z)
              version_tags = [tag for tag in tags if re.match(r'^v\d+(\.\d+)*$', tag.name)]
              if version_tags:
                  return version_tags[0].name
              
              # If no version tags found, return the latest tag
              return tags[0].name

          def check_workflow_files():
              """Check all workflow files for action versions that need updates."""
              updates_needed = {}
              workflows_dir = Path('.github/workflows')
              
              if not workflows_dir.exists():
                  print("No workflows directory found.")
                  return updates_needed
                  
              for workflow_file in workflows_dir.glob('*.yml'):
                  with open(workflow_file, 'r') as f:
                      try:
                          content = f.read()
                          # Find all action references (uses: owner/repo@version)
                          action_refs = re.findall(r'uses:\s+([a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+)@(v\d+(\.\d+)*)', content)
                          
                          for action_ref in action_refs:
                              repo_name, current_version = action_ref
                              latest_version = get_latest_version(repo_name)
                              
                              if latest_version and latest_version != current_version:
                                  if workflow_file.name not in updates_needed:
                                      updates_needed[workflow_file.name] = []
                                  
                                  updates_needed[workflow_file.name].append({
                                      'repo': repo_name,
                                      'current_version': current_version,
                                      'latest_version': latest_version
                                  })
                      except yaml.YAMLError:
                          print(f"Error parsing {workflow_file}")
                          continue
              
              return updates_needed

          def check_precommit_hooks():
              """Check pre-commit config for hooks that need updates."""
              updates_needed = {}
              precommit_file = Path('.pre-commit-config.yaml')
              
              if not precommit_file.exists():
                  return updates_needed
                  
              try:
                  with open(precommit_file, 'r') as f:
                      config = yaml.safe_load(f)
                      
                  for repo_config in config.get('repos', []):
                      repo_url = repo_config.get('repo')
                      current_rev = repo_config.get('rev')
                      
                      # Skip if not a GitHub repo or doesn't have a version
                      if not repo_url or not current_rev or not repo_url.startswith(('https://github.com/', 'git@github.com:')):
                          continue
                          
                      # Extract repo name from URL
                      if repo_url.startswith('https://github.com/'):
                          repo_name = repo_url.replace('https://github.com/', '')
                      else:  # git@github.com: format
                          repo_name = repo_url.replace('git@github.com:', '')
                          
                      # Get latest version
                      latest_version = get_latest_version(repo_name)
                      
                      if latest_version and latest_version != current_rev:
                          if '.pre-commit-config.yaml' not in updates_needed:
                              updates_needed['.pre-commit-config.yaml'] = []
                              
                          updates_needed['.pre-commit-config.yaml'].append({
                              'repo': repo_name,
                              'current_version': current_rev,
                              'latest_version': latest_version
                          })
              except Exception as e:
                  print(f"Error checking pre-commit config: {e}")
                  
              return updates_needed

          # Main execution
          workflow_updates = check_workflow_files()
          precommit_updates = check_precommit_hooks()
          
          # Combine results
          all_updates = {**workflow_updates, **precommit_updates}
          
          if all_updates:
              print("Updates needed:")
              for file, updates in all_updates.items():
                  print(f"\n{file}:")
                  for update in updates:
                      print(f"  {update['repo']}: {update['current_version']} -> {update['latest_version']}")
              
              # Save updates to file for next step
              with open('action_updates.json', 'w') as f:
                  json.dump(all_updates, f)
              
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("updates_needed=true\n")
              print("\nUpdates needed, setting output variable.")
          else:
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("updates_needed=false\n")
              print("\nNo updates needed, setting output variable.")
          EOF

          python check_actions.py

      - name: Create PR for updates
        if: steps.check-updates.outputs.updates_needed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
        run: |
          # Create a new branch
          BRANCH_NAME="github-actions/$(date +%s)-update-third-party-actions"
          git checkout -b $BRANCH_NAME

          cat > update_actions.py << 'EOF'
          import os
          import re
          import json
          import subprocess
          from pathlib import Path

          def update_workflow_file(file_path, updates):
              """Update action versions in a workflow file."""
              with open(file_path, 'r') as f:
                  content = f.read()
                  
              for update in updates:
                  repo = update['repo']
                  current_version = update['current_version']
                  latest_version = update['latest_version']
                  
                  # Replace the version in the file
                  pattern = f'uses:\\s+{repo}@{current_version}'
                  replacement = f'uses: {repo}@{latest_version}'
                  content = re.sub(pattern, replacement, content)
                  
              with open(file_path, 'w') as f:
                  f.write(content)
                  
              return True

          def update_precommit_config(updates):
              """Update hook versions in pre-commit config."""
              file_path = '.pre-commit-config.yaml'
              updated = False
              
              try:
                  import yaml
                  
                  with open(file_path, 'r') as f:
                      config = yaml.safe_load(f)
                      
                  for update in updates:
                      repo_name = update['repo']
                      latest_version = update['latest_version']
                      
                      # Find the repo in the config
                      for repo_config in config.get('repos', []):
                          repo_url = repo_config.get('repo')
                          
                          # Match repo by name
                          if (repo_url == f'https://github.com/{repo_name}' or 
                              repo_url == f'git@github.com:{repo_name}.git' or
                              repo_url == f'git@github.com:{repo_name}'):
                              repo_config['rev'] = latest_version
                              updated = True
                              
                  if updated:
                      with open(file_path, 'w') as f:
                          yaml.dump(config, f, default_flow_style=False)
              except Exception as e:
                  print(f"Error updating pre-commit config: {e}")
                  return False
                  
              return updated

          # Load updates from file
          try:
              with open('action_updates.json', 'r') as f:
                  all_updates = json.load(f)
          except FileNotFoundError:
              print("No updates file found.")
              exit(1)

          # Apply updates
          updated_files = []
          for file_path, updates in all_updates.items():
              if file_path == '.pre-commit-config.yaml':
                  if update_precommit_config(updates):
                      updated_files.append(file_path)
              else:
                  if update_workflow_file(file_path, updates):
                      updated_files.append(file_path)

          # Commit and push changes
          if updated_files:
              # Add files to git
              for file in updated_files:
                  subprocess.run(['git', 'add', file])
                  
              # Commit changes
              commit_message = "Update third-party actions and pre-commit hooks\n\n"
              for file in updated_files:
                  commit_message += f"- Updated versions in {file}\n"
              
              subprocess.run(['git', 'commit', '-m', commit_message])
              
              # Push changes
              subprocess.run(['git', 'push', 'origin', os.environ.get('BRANCH_NAME')])
              
              print(f"Updated {len(updated_files)} files and pushed changes to {os.environ.get('BRANCH_NAME')}")
          else:
              print("No files were updated.")
          EOF

          # Export branch name for the script
          export BRANCH_NAME=$BRANCH_NAME
          
          # Run the update script
          python update_actions.py
          
          # Create PR using Devin API
          cat > create_pr.py << 'EOF'
          import os
          import requests
          import json
          import subprocess

          def create_pr_with_devin():
              """Create a PR using Devin API."""
              api_key = os.environ.get("DEVIN_API_KEY")
              if not api_key:
                  print("DEVIN_API_KEY not set")
                  return False
                  
              # Get repository info
              repo_url = subprocess.check_output(["git", "config", "--get", "remote.origin.url"]).decode().strip()
              repo_name = repo_url.split("/")[-1].replace(".git", "")
              org_name = repo_url.split("/")[-2].split(":")[-1]
              full_repo = f"{org_name}/{repo_name}"
              
              branch_name = os.environ.get("BRANCH_NAME")
              
              # Create PR content
              pr_title = "Update third-party actions and pre-commit hooks"
              pr_body = """
          This PR updates the versions of third-party actions in workflow files and hooks in pre-commit config.

          Updates were automatically detected and applied by the GitHub Actions workflow.

          Link to Devin run: https://app.devin.ai/sessions/3105913418134a13abf8bc28e7c1714b
          Requested by: Mitsukuni Sato (key@kenos.jp)
          """
              
              # Use GitHub CLI to create PR
              try:
                  subprocess.run([
                      "gh", "pr", "create",
                      "--title", pr_title,
                      "--body", pr_body,
                      "--repo", full_repo,
                      "--base", "master",
                      "--head", branch_name
                  ], check=True)
                  
                  print(f"Successfully created PR for {branch_name}")
                  return True
              except subprocess.CalledProcessError as e:
                  print(f"Error creating PR: {e}")
                  return False

          # Create PR
          create_pr_with_devin()
          EOF

          python create_pr.py
